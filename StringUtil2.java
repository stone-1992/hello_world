package com.zhcx.commons.authority.utils;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Random;import java.util.Set;import java.util.regex.Matcher;import java.util.regex.Pattern;import javax.servlet.http.HttpServletRequest;/** * Copyright dayhr2013-2014 All rights reserved * @ClassName:     StringUtil.java * @Description:   TODO  *  * @author         luojiayong<jiayong_luo@dayhr.com>   * @version        V1.0   * @Date           2014-6-25 下午2:58:57  */public class StringUtil {	/**     * Checks if an object is null or if its string representation is empty.     */    public static boolean isNullOrEmpty(Object s) {        return s == null || "".equals(s.toString().trim())||"null".equals(s.toString().trim());    }        /**     * Checks if a string is null, empty or made of whitespaces only.     */    public static boolean isNullOrWhitespace(String s) {        if (s == null) {            return true;        }                for (int i = 0; i < s.length(); i++) {            if (!Character.isWhitespace(s.charAt(i))) {                return false;            }        }                return true;    }	  	/**  @param url 截取链接URL	 *   @param utype 类型 如url则取链接最后一层文件名  suffix为取后缀名	     * 获取链接的后缀名 	     * @return 	     */      public static String parseSuffix(String url,String utype) {  		Pattern pattern = Pattern.compile("\\S*[?]\\S*");      	if(url.indexOf(".")<=0) return "";        Matcher matcher = pattern.matcher(url);            String[] spUrl = url.toString().split("/");                          int len = spUrl.length;                  String endUrl = spUrl[len - 1];                  if("url".equals(utype))        	return endUrl;                String ss[]=endUrl.split("\\.");                if(matcher.find()) {              String[] spEndUrl = endUrl.split("\\?");              return spEndUrl[0].split("\\.")[ss.length-1];          }          return endUrl.split("\\.")[ss.length-1];  	}     /**     * 返回list     * @param gstring 1，2，3，4，     * @return list<1><2>     */    public static List<Integer> getStringToList(String gstring)    {    	List<Integer> list=new ArrayList<Integer>();    	Set<String> setlist=new HashSet<String>();    	String ss[]=(""+gstring).split(",");    	for (String s:ss) {    		if(!"null".equals(s)&&!"".equals(s)&&s!=null)    		{    			setlist.add(s);    			// list.add(Integer.valueOf(s));    		}		}    	Iterator<String>  it=setlist.iterator();    	while(it.hasNext())    	{    		list.add(Integer.valueOf((String)it.next()));    	}    	    	if(list.size()==0) list.add(0);    	return list;    }        /**     * 获取客户端来的IP     * 2015-3-16 14:06:53，@duxinfeng修改     * @Title:        getAddr      * @Description:  TODO      * @param:        @param request     * @param:        @return         * @return:       String         * @throws      * @author        luojiayong<jiayong_luo@dayhr.com>     * @Date          2014-9-25 下午3:05:18     */	public static String getAddr(HttpServletRequest request) {		String ip = request.getHeader("x-forwarded-for");		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("WL-Proxy-Client-IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("HTTP_CLIENT_IP");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getHeader("HTTP_X_FORWARDED_FOR");		}		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {			ip = request.getRemoteAddr();		}		// 如果通过了多级反向代理的话，X-Forwarded-For的值并不止一个，而是一串IP值		// 如： X-Forwarded-For：192.168.1.110， 192.168.1.120， 192.168.1.130， 192.168.1.100 用户真实IP为： 192.168.1.110		if (ip != null) {			String ips[] = ip.split(",");			ip = ips[0];		}				return ip;	}		public static double formateRate(String rateStr,int amount){ 		 if(isNullOrEmpty(rateStr)) rateStr="0";		 BigDecimal bg = new BigDecimal(rateStr);	     return bg.setScale(amount, BigDecimal.ROUND_HALF_UP).doubleValue();    }  		// 根据指定长度生成纯数字的随机数	public static String createData(int length) {		StringBuilder sb = new StringBuilder();		Random rand = new Random();		for (int i = 0; i < length; i++) {			sb.append(rand.nextInt(10));		}		return sb.toString();	}				public static void main(String[] args) {		System.out.println(formateRate("",4));	}	}